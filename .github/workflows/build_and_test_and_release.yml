name: build_all
# Build, test and release Splitgraph/sgr binary/engine

on: push

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    env:
      COMPOSE_VERSION: '1.25.4'
      POETRY_VERSION: '1.0.5'
      DOCKER_REPO: splitgraph
      DOCKER_ENGINE_IMAGE: engine
      DOCKER_TAG: development
      DBT_VENV: dbt_venv
      TAP_MYSQL_VENV: tap_mysql_venv

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Setup Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - uses: actions/cache@v1
        with:
          path: ~/docker_images
          key: docker_cache
      - uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: pip_cache
      - name: "Install prerequisites"
        run: "./.ci/install_prereqs.sh"
      - name: "Install package and build the engine"
        run: ./.ci/install.sh
      - name: "Save Docker cache"
        run: |
          mkdir -p ~/docker_images
          docker images
          docker save -o ~/docker_images/engine.tar $DOCKER_REPO/$DOCKER_ENGINE_IMAGE:$DOCKER_TAG
          echo "Saved engine $DOCKER_REPO/$DOCKER_ENGINE_IMAGE:$DOCKER_TAG to cache"
          ls -lah ~/docker_images
      - name: "Start the test Compose stack"
        if: "!contains(github.event.head_commit.message, '[skip test]')"
        run: ./.ci/up_architecture.sh
      - name: "Run the tests"
        if: "!contains(github.event.head_commit.message, '[skip test]')"
        run: |
          source "$HOME"/.poetry/env
          poetry run mypy splitgraph
          poetry run pytest test/ -v -m "not mounting and not example"
          ./wait-for-test-architecture.sh --mounting
          export PATH=$PATH:$TAP_MYSQL_VENV/bin
          poetry run pytest test/ -v -m "mounting and not example" --cov-append
          ./.ci/down_architecture.sh
      - name: "Run example tests"
        # Don't run example tests if we're doing a release -- we'll be
        # recording all of them as Asciinemas anyway, so this is redundant.
        if: "!startsWith(github.ref, 'refs/tags/') && !contains(github.event.head_commit.message, '[skip test]')"
        run: |
          source "$HOME"/.poetry/env
          export PATH=$PATH:$DBT_VENV/bin
          poetry run pytest test/ -sv -m "example" --cov-append
      - name: "Submit coverage to Coveralls"
        if: "!contains(github.event.head_commit.message, '[skip test]')"
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          source "$HOME"/.poetry/env
          poetry run coveralls
      - name: "Build doc / Asciicast bundle and push out Docker engine (tags only)"
        if: "startsWith(github.ref, 'refs/tags/')"
        env:
          SG_DEMO_KEY: ${{ secrets.SG_DEMO_KEY }}
          SG_DEMO_SECRET: ${{ secrets.SG_DEMO_SECRET }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        # We could split this out into a separate stage but it would mean installing Poetry, Compose and this package all over again.
        run: |
          echo "Building Asciicast/doc bundle"
          ./.ci/build_artifacts.sh
          echo "Uploading engine image to Docker Hub"
          ./.ci/push_engine.sh
          cp ./install.sh dist
          # TODO figure out if we want to do poetry upload here
          # "$HOME"/.poetry/bin/poetry build
          # Currently upload is commented out since it's once-only and we love
          # republishing v0.1.0 for now.
          # "$HOME"/.poetry/bin/poetry publish -r testpypi
      - name: "Upload release artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  windows_binary:
    runs-on: windows-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: build_and_test
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Get artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Build the binary
        # default is powershell that doesn't do inline asterisk expansion.
        shell: bash
        run: |
          pip install dist/splitgraph-*-py3-none-any.whl
          pip install pyinstaller
          pyinstaller -F splitgraph.spec
          dist/sgr.exe --version
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v2
        with:
          name: sgr-windows
          path: dist/sgr.exe

  linux_binary:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: build_and_test
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Get artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Build the binary
        run: |
          pip install dist/splitgraph-*-py3-none-any.whl
          pip install pyinstaller
          pyinstaller -F splitgraph.spec
          dist/sgr --version
      - name: Smoke test the binary
        env:
          SG_DEMO_KEY: ${{ secrets.SG_DEMO_KEY }}
          SG_DEMO_SECRET: ${{ secrets.SG_DEMO_SECRET }}
        run: |
          dist/sgr --verbosity DEBUG engine add --password password \
            --image splitgraph/engine:latest
          dist/sgr status
          dist/sgr cloud login-api --api-key "$SG_DEMO_KEY" --api-secret "$SG_DEMO_SECRET"
          dist/sgr clone --download-all splitgraph/census
          dist/sgr checkout splitgraph/census:latest
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v2
        with:
          name: sgr-linux
          path: dist/sgr

  osx_binary:
    runs-on: macOS-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: build_and_test
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Get artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Build the binary
        run: |
          pip install dist/splitgraph-*-py3-none-any.whl
          pip install pyinstaller
          pyinstaller -F splitgraph.spec
          dist/sgr --version
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v2
        with:
          name: sgr-osx
          path: dist/sgr


  upload_release:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs:
      - windows_binary
      - linux_binary
      - osx_binary
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: List artifacts
        run: find artifacts
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Upload doc bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/dist/sgr-docs-bin.tar.gz
          asset_name: sgr-docs-bin.tar.gz
          asset_content_type: application/gzip
      - name: Upload installation script
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/dist/install.sh
          asset_name: install.sh
          asset_content_type: application/x-sh
      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sgr-windows/sgr.exe
          asset_name: sgr-windows-x86_64.exe
          asset_content_type: application/octet-stream
      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sgr-linux/sgr
          asset_name: sgr-linux-x86_64
          asset_content_type: application/octet-stream
      - name: Upload OSX binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sgr-osx/sgr
          asset_name: sgr-osx-x86_64
          asset_content_type: application/octet-stream
