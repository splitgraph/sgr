language: python
install: true
sudo: required
python:
  - '3.6'
install:
  - poetry install -E ingestion
  - sudo cat /etc/docker/daemon.json
  - cd engine && make
  - cd ..
script:
#  # Run static type checker first to short circuit obvious errors
#  - poetry run mypy splitgraph
#  # The majority of the test suite doesn't depend on {pg,mongo,mysql}origin being up and they
#  # take a lot of time to start up (especially the first time). So, whilst the 3 DBs are busy starting up,
#  # we run the core tests against the local/remote engines and then run the rest of the tests (about 10% of them)
#  # with the databases up, merging coverage.
#  - poetry run pytest -v -m "not mounting and not example"
#  - ./wait-for-test-architecture.sh --mounting
#  - poetry run pytest -v -m "mounting and not example" --cov-append
#  # The "example" test suite needs the test services to be down, since it tests the end-to-end flow
#  # of bringing them up and running each example.
#  - ./.ci/down_architecture.sh
#  - poetry run pytest -sv -m "example" --cov-append
#  - docker images
  - echo "Skipping tests, test deploy"
services:
  - docker

env:
  global:
    - COMPOSE_VERSION: '1.25.4'
    - DOCKER_REPO: splitgraph
    - DOCKER_ENGINE_IMAGE: engine
    - DOCKER_TAG: development
  matrix:
    - BINARY_OUTPUT: 'sgr-linux'

cache:
  pip: true
  directories:
    - docker_images

before_install:
  # Update docker to 19 to get buildkit support
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - sudo apt-get update
  - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
  # Disable https://mirror.gcr.io Docker registry mirror since it breaks with Buildkit
  # https://github.com/moby/moby/issues/39120
  # https://github.com/moby/buildkit/issues/606
  - "echo '{\"mtu\": 1460}' | sudo dd of=/etc/docker/daemon.json && sudo systemctl restart docker"
  - './.ci/before_install.sh'

before_script:
  - './.ci/before_script.sh'

before_cache:
  # Save the actual tag rather than calling `docker images -q` so that the tag gets restored
  # on docker load.
  - docker save -o docker_images/engine.tar $DOCKER_REPO/$DOCKER_ENGINE_IMAGE:$DOCKER_TAG

after_success:
  - poetry run coveralls

# How to release:
# * on master:
# * update CHANGELOG
# * do bumpversion {major,minor,patch} to bump version: this will create a new commit and tag
# * git push --tags

# How to undo a release:
# * Remove the release from the releases page on GH
# * git tag -d <tag>  -- delete tag locally
# * git push origin :<tag> -- delete tag remotely on GH
# * delete the release from pypi (won't be able to push the same version again)

before_deploy:
  - './.ci/before_deploy.sh'
deploy:
  - provider: releases
    api_key:
      secure: MWwqUDXZDI/Wi4qk3EM5afR5XVn/DayFQCkct4lRFw9TgpB1uKbyQKuPJnycE7nOPmdAdzQhsSIHfmoFRuO9ReQsADlOR1BbSkI1KGLIbPx/74tQTQ6Htf+VQrfX7R1Yk9C3mIfd51Ix9ffvPzmWfeF6At/fcPrVvTK/jWvyQ2NZimEAGSgELB1KItZWAighoT4x5cVEc11MBMj7JkD4wOrBrP4aaNq3HLIZW7cMIjBHMhvDvcd/ry7kZLjAQtSzEPL8bsulRjYW0nJzLJyGci5dCSga1Qd2VBdLlkCZHcL0OoUqCQmFTYT0AwkjHwO96oVFy8WYvP57Vvf/613w1w43kr8FrQAu37Ahhg+douplo4owvXhJUm+G53BwtXeY2MFvBqxROdOLTD9yjAyAH+3mMBAFtWswfQhxP4dpn4m+Js5Lp4j7PwM4V+x4XZ/bP1HiBGLS4NHd4sBrNFSTEbY5WuuRSBx/HJP5AEtu60gMKUQwdVNz9XEDXxKRCWaxihcYTCHCnJBt4MLp7WtUNjymt4zz9IZLRy05rskx/KXE0nT7aM0KeyZqFEz0+dkI9srSsAJSxQKtJp3rBfPgRq9m8RQ6GvFeqx+fXiS5LBlICHE7S9Ql8QHVI0ut+ru33k8IUgtvElUvZgl7x7BxeBYGzNYO8GzyKNksKsMpHWo=
    file: dist/${BINARY_OUTPUT}
    skip_cleanup: true
    draft: true
    on:
      repo: splitgraph/splitgraph
      tags: true
      # Uncomment this to trigger deploys from all branches
      all_branches: true
  - provider: script
    # Remove -r testpypi to publish to the real PyPI
    # NB PyPI is write-once: once we've published a version, we can't overwrite it!
    script: poetry publish -r testpypi
    skip_cleanup: true
    on:
      repo: splitgraph/splitgraph
      tags: true
      # Uncomment this to trigger deploys from all branches
      all_branches: true
  - provider: script
    script: .ci/push_engine.sh
    skip_cleanup: true
    on:
      repo: splitgraph/splitgraph
      # Only do this on master but even if there are no tags: in that case,
      # we push out a "latest" image + a commit hash image.
      # Uncomment this to trigger deploys from all branches
      all_branches: true
